<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <style>
    .truncate-text {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      /* Show up to 3 lines */
      -webkit-box-orient: vertical;
      overflow: hidden;
      text-overflow: ellipsis;
      max-height: 75px;
      /* Approximate height for 3 lines, adjust as needed */
      word-break: break-word;
    }

    .blog-header {
      line-height: 1;
      border-bottom: 1px solid #e5e5e5;
    }

    .blog-header-logo {
      font-family: "Playfair Display", Georgia, "Times New Roman", serif;
      font-size: 2.25rem;
    }


    .flex-auto {
      flex: 0 0 auto;
    }

    .h-250 {
      height: 250px;
    }

    @media (min-width: 768px) {
      .h-md-250 {
        height: 250px;
      }
    }

    .blog-post {
      margin-bottom: 4rem;
    }

    .blog-post-title {
      margin-bottom: .25rem;
      font-size: 2.5rem;
    }

    .blog-post-meta {
      margin-bottom: 1.25rem;
      color: #727272;
    }




    .card-img-custom {
      height: 100%;
      width: 100%;
      /* Ensure image takes full width of its container */
      object-fit: cover;
      border-radius: 0 3px 3px 0;
      /* Apply border-radius only to the right side */
    }

    .card-image-wrapper {
      width: 270px;
      /* Fixed width for the image column */
      height: 270px;
      /* Fixed height for the image column, matching h-md-250 */
      overflow: hidden;
      display: flex;
      /* Use flex to center the image if needed */
      display: flex;
      justify-content: center;
      align-items: center;
    }

    /* ... your existing CSS ... */

    @keyframes gradientAnimation {
      0% {
        background-position: 0% 50%;
      }

      50% {
        background-position: 100% 50%;
      }

      100% {
        background-position: 0% 50%;
      }
    }

    .animated-gradient-bg {
      background: linear-gradient(270deg, #32B4C1, #6a11cb, #2575fc, #8a2be2);
      /* Purple, Blue, Violet */
      background-size: 400% 400%;
      /* Make the gradient larger than the element to allow animation */
      animation: gradientAnimation 15s ease infinite;
      /* Apply the animation */
      color: white;
      /* Ensure text is readable on dark background */
    }

    /* Override Bootstrap's text-body-secondary if it's applied to text within this div */
    .animated-gradient-bg h4,
    .animated-gradient-bg p {
      color: white !important;
      /* !important is often needed to override Bootstrap's text color utilities */
    }

    .card.row.g-0 {
      flex-grow: 1;
    }

    /* Ensure the banner image respects its height */
    /* Ensure the banner image respects its height */
    .banner {
      max-height: 70vh;
      /* Set maximum height to 70% of viewport height as in your HTML */
      width: 100%;
      /* Ensure it fills the width */
      object-fit: fill;
      /* Crops the image to fill, maintaining aspect ratio */
    }

    /* Container for the banner image to facilitate pseudo-element positioning */
    .banner-container {
      position: relative;
      /* Crucial for positioning pseudo-elements */
      /* If you want the animation to *always* stay within the image's bounds, keep overflow: hidden.
       If you want parts of it to visibly extend beyond the image's rectangle, remove or adjust overflow.
       For "extending away from edges", leaving it as hidden might clip the desired effect.
       Let's remove overflow: hidden for now to see the full "extension" effect. */
      /* overflow: hidden; */
    }


    /* Keyframes for the "blossomy, starry, drippy" effect */


    /* Pseudo-element for the left edge */
  </style>
</head>

<body style="background-color: aliceblue;">
  <div class="container">
    <header class="blog-header py-3">
      <div class="row flex-nowrap justify-content-between align-items-center">
        <div class="col-4 pt-1">
          <a class="text-muted" href="#">Subscribe</a>
        </div>
        <div class="col-4 text-center">
          <a class="blog-header-logo text-dark" href="#">Dev Door</a>
        </div>
        <div class="col-4 d-flex justify-content-end align-items-center">

          <a class="btn btn-sm btn-primary" href="/new">+ New Post</a>
        </div>
      </div>
    </header>

    <div class="nav-scroller py-1 mb-2">
      <nav class="nav d-flex justify-content-between">
        <a class="p-2 text-muted" href="/">Home</a>
        <a class="p-2 text-muted" href="#">About Us</a>


        <a class="p-2 text-muted" href="#">Posts</a>

      </nav>
    </div>

    <main role="main" class="container">
      <div class=" row container-fluid gap-30">
        <div class="row mb-4">
          <div class="col position-relative banner-container">
            <img class="banner img-fluid mx-auto d-block   w-100" style="max-height: 70vh;" src="/images/code_girl.jpg"
              alt="dev door">
          </div>
          <!-- <h1 style="display: inline-block;">Posts</h1> -->
        </div>
      </div>

      <!-- Unified posts section -->
      <div class="row my-4 gap-4">
        <% posts.forEach((post)=> { %>
          <div class="col-md-10 mx-auto">
            <div
              class="row g-0 border rounded overflow-hidden flex-md-row mb-4 shadow-sm h-md-250 position-relative h-100">
              <div class="col p-4 d-flex flex-column position-static">
                <strong
                  class="d-inline-block mb-2 <%= posts.indexOf(post) % 2 === 0 ? 'text-primary-emphasis' : 'text-success-emphasis' %>">
                  <%= posts.indexOf(post) % 2===0 ? 'Article' : 'Article' %>
                </strong>
                <h3 class="mb-0">
                  <%= post.title %>
                </h3>
                <div class="mb-1 text-body-secondary">
                  <%= post.date %>
                </div>
                <p class="card-text mb-auto  truncate-text">
                  <%= post.content %>
                </p>
                <a href="/post/<%= post.id %>" class="icon-link gap-1 icon-link-hover stretched-link">
                  Continue reading
                  <svg class="bi" aria-hidden="true">
                    <use xlink:href="#chevron-right"></use>
                  </svg>
                </a>
              </div>
              <div class="col-auto d-none d-lg-block card-image-wrapper">
                <% if (post.image) { %>
                  <img src="<%= post.image %>" class="bd-placeholder-img card-img-custom " alt="Post image">

                  <% } else { %>

                    <svg class="bd-placeholder-img card-img-custom " width="200" height="250"
                      xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail"
                      preserveAspectRatio="xMidYMid slice" focusable="false">
                      <title>Placeholder</title>
                      <rect width="100%" height="100%" fill="#55595c"></rect>
                      <text x="50%" y="50%" fill="#eceeef" dy=".3em">Thumbnail</text>
                    </svg>

                    <% } %>
              </div>
            </div>
          </div>
          <% }); %>
      </div>
      <aside class="col-md-12 blog-sidebar">
        <div class="p-4 mb-3 rounded animated-gradient-bg">
          <h4 class="font-italic">About Dev Door</h4>
          <p class="mb-0">
            Welcome to Dev Door, your very passionate and amazing blogging website! We're dedicated to
            bringing you the latest insights, tutorials, and discussions in the world of technology and
            beyond. Join our community and explore new horizons with us.
          </p>
        </div>
      </aside>
    </main>
  </div>

  <!-- Cat Chatbot Widget -->
  <div id="cat-chat-container">
    <div id="chat-window" style="display: none;">
      <div class="chat-header animated-gradient-bg">
        <h6>Dev Door AI</h6>
        <button id="close-chat" class="btn btn-sm btn-outline-secondary">Ã—</button>
      </div>
      <div id="chat-messages"></div>
      <div class="chat-input">
        <input type="text" id="user-input" placeholder="Ask me anything..." class="form-control">
        <button id="send-btn" class="btn btn-primary">Send</button>
      </div>
    </div>
    <div id="cat-icon">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="60" height="60">
        <circle cx="50" cy="50" r="45" fill="#FFD700" />
        <!-- Cat face -->
        <circle cx="35" cy="40" r="5" fill="#333" />
        <circle cx="65" cy="40" r="5" fill="#333" />
        <path d="M40 60 Q50 70 60 60" stroke="#333" stroke-width="2" fill="none" />
        <!-- Whiskers -->
        <line x1="30" y1="50" x2="10" y2="50" stroke="#333" stroke-width="1" />
        <line x1="30" y1="55" x2="10" y2="60" stroke="#333" stroke-width="1" />
        <line x1="30" y1="45" x2="10" y2="40" stroke="#333" stroke-width="1" />
        <line x1="70" y1="50" x2="90" y2="50" stroke="#333" stroke-width="1" />
        <line x1="70" y1="55" x2="90" y2="60" stroke="#333" stroke-width="1" />
        <line x1="70" y1="45" x2="90" y2="40" stroke="#333" stroke-width="1" />
        <!-- Ears -->
        <path d="M25 25 L35 15 L45 25 Z" fill="#FFA500" />
        <path d="M55 25 L65 15 L75 25 Z" fill="#FFA500" />
      </svg>
    </div>
  </div>

  <style>
    /* Cat Chatbot Styles */
    #cat-chat-container {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 1000;
    }

    #cat-icon {
      cursor: pointer;
      transition: transform 0.3s;
    }

    #cat-icon:hover {
      transform: scale(1.1);
    }

    #chat-window {
      width: 300px;
      height: 400px;
      background: white;
      border-radius: 10px;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
      display: flex;
      flex-direction: column;
      overflow: hidden;
      margin-bottom: 10px;
    }

    .chat-header {
      background: linear-gradient(270deg, #32B4C1, #6a11cb);
      color: white;
      padding: 10px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    #chat-messages {
      flex: 1;
      padding: 10px;
      overflow-y: auto;
      background: #f9f9f9;
    }

    .chat-input {
      display: flex;
      padding: 10px;
      background: #fff;
      border-top: 1px solid #eee;
    }

    #user-input {
      flex: 1;
      margin-right: 5px;
    }

    .message {
      margin-bottom: 10px;
      padding: 8px 12px;
      border-radius: 15px;
      max-width: 80%;
      word-wrap: break-word;
      white-space: pre-wrap;
    }

    .user-message {
      background: #e3f2fd;
      margin-left: auto;
      border-bottom-right-radius: 5px;
    }

    .bot-message {
      background: #f1f1f1;
      margin-right: auto;
      border-bottom-left-radius: 5px;
    }
  </style>

  <!-- Add this in index.ejs, before the closing </body> tag -->
  <script>

    // Add this at the top of your <script> block
    marked.setOptions({
      gfm: true, // Enable GitHub Flavored Markdown
      breaks: true, // Convert single \n to <br>
      pedantic: false ,// Disable strict parsing
      // sanitize: true // Sanitize HTML to prevent XSS
    });

    // console.log('marked options set:', marked.getOptions()); // Debug options
    // DOM Elements

    const catIcon = document.getElementById('cat-icon');
    const chatWindow = document.getElementById('chat-window');
    const chatMessages = document.getElementById('chat-messages');
    const userInput = document.getElementById('user-input');
    const sendBtn = document.getElementById('send-btn');
    const closeChat = document.getElementById('close-chat');


    if (!catIcon) console.error('cat-icon not found');
    if (!chatWindow) console.error('chat-window not found');
    // Toggle chat window
    catIcon.addEventListener('click', () => {
      console.log('Cat icon clicked'); // Debug click event
      chatWindow.style.display = chatWindow.style.display === 'none' ? 'flex' : 'none';
    });

    closeChat.addEventListener('click', () => {
      chatWindow.style.display = 'none';
    });

    // Send message function
    async function sendMessage() {
      const message = userInput.value.trim();
      if (!message) return;

      // Add user message to chat
      addMessage(message, 'user');
      userInput.value = '';

      // Show typing indicator
      const typingIndicator = document.createElement('div');
      typingIndicator.className = 'message bot-message';
      typingIndicator.textContent = 'Typing...';
      chatMessages.appendChild(typingIndicator);
      chatMessages.scrollTop = chatMessages.scrollHeight;

      try {
        console.log('Sending message to server...');
        const response = await fetchDeepSeekResponse(message);
        console.log('Received response:', response);

        // Remove typing indicator
        chatMessages.removeChild(typingIndicator);

        // Add bot response
        addMessage(response, 'bot');
      } catch (error) {
        console.error('Full error:', error);
        chatMessages.removeChild(typingIndicator);
        addMessage(`Error: ${error.message}`, 'bot');
      }
    }

    // Add message to chat UI
    function addMessage(text, sender) {
      const messageElement = document.createElement('div');
      messageElement.className = `message ${sender}-message`;
      console.log('Raw API Response Text:', text); // Debug raw response
     const processedText = text.replace(/\\n/g, '\n'); // Convert literal \n to actual newlines
     console.log('Processed text:', processedText);
    const html = marked.parse(processedText);
    console.log('Parsed HTML:', html); // Debug the resulting HTML
     messageElement.innerHTML = html;
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // API call to your backend
    async function fetchDeepSeekResponse(prompt) {
      try {
        console.log('Calling /api/chat with prompt:', prompt);
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ message: prompt })
        });

        if (!response.ok) {
          const errorText = await response.text();
          console.error('API Error Response:', errorText);
          throw new Error(`Server responded with status ${response.status}`);
        }

        const text = await response.text();
        console.log('API Response Text:', text);
        return text;
      } catch (error) {
        console.error('Fetch Error:', error);
        throw error;
      }
    }

    // Event listeners
    sendBtn.addEventListener('click', sendMessage);
    userInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q"
    crossorigin="anonymous"></script>
</body>

</html>